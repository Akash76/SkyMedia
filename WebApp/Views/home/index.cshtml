@using AzureSkyMedia.PlatformServices;

@{
    MediaStream[] mediaStreams = ViewData["mediaStreams"] as MediaStream[];
    int streamNumber = int.Parse(ViewData["streamNumber"].ToString());
    string autoPlay = ViewData["autoPlay"] as string;
    string authToken = ViewData["authToken"] as string;
    string accountMessage = ViewData["accountMessage"] as string;
}

@section head {
    <link type="text/css" rel="stylesheet" href="//amp.azure.net/libs/amp/@ViewData["mediaPlayerVersion"]/skins/amp-default/azuremediaplayer.min.css" />
    <link type="text/css" rel="stylesheet" href="~/css/amve.min.css" />
    <script type="text/javascript" src="//amp.azure.net/libs/amp/@ViewData["mediaPlayerVersion"]/azuremediaplayer.min.js"></script>
    <script type="text/javascript" src="~/js/playbackrate.js"></script>
    <script type="text/javascript" src="~/js/amve.min.js"></script>
    <script type="text/javascript">
        function SlideStreamNumber(slideDirection) {
            var streamNumber = _streamNumber;
            if (slideDirection == "left" && streamNumber > 1) {
                streamNumber = streamNumber - 1;
            } else if (slideDirection == "right" && streamNumber < _mediaStreams.length) {
                streamNumber = streamNumber + 1;
            }
            window.location.href = "/?stream=" + streamNumber;
        }
        function SetStreamNumber(streamNumber) {
            var sliderHandle = document.getElementsByClassName("ui-slider-handle")[0];
            if (streamNumber == 1 || streamNumber == _mediaStreams.length) {
                sliderHandle.innerText = "";
            } else {
                sliderHandle.innerText = streamNumber;
            }
        }
        function SetStreamName(mediaStream) {
            var streamName = mediaStream.name.replace("<br /><br />", " ");
            if (mediaStream.protectionTypes.length > 0) {
                streamName = streamName + " + " + mediaStream.protectionTypes.join(" + ");
            }
            $("#streamName").html(streamName);
        }
        function GetMediaStreams() {
            var mediaStreams = @Html.Raw(Json.Serialize(ViewData["mediaStreams"]));
            for (var i = 0; i < mediaStreams.length; i++) {
                for (var t = 0; t < mediaStreams[i].textTracks.length; t++) {
                    var languageCode = mediaStreams[i].textTracks[t].srclang;
                    mediaStreams[i].textTracks[t].label = GetLanguageLabel(languageCode);
                }
            }
            return mediaStreams;
        }
        function GetAnalyticsProcessor(fileName) {
            var fileNameInfo = fileName.split("@Constant.TextDelimiter.Identifier");
            var analyticsProcessor = fileNameInfo[1];
            return analyticsProcessor.replace("@Constant.Media.FileExtension.Json", "");
        }
        function SetAnalyticsProcessors(mediaStream) {
            var processors = document.getElementById("analyticsProcessors");
            processors.options.length = 0;
            processors.options[processors.options.length]= new Option("", "");
            for (var i = 0; i < mediaStream.analyticsMetadata.length; i++) {
                var analyticsMetadata = mediaStream.analyticsMetadata[i];
                var optionName = analyticsMetadata.processorName;
                var optionValue = analyticsMetadata.fileName;
                processors.options[processors.options.length]= new Option(optionName, optionValue);
            }
            $("#mediaMetadata").empty();
        }
        function GetFragmentEvent(timeSeconds, timescale, fragment) {
            var ticksPerMillisecond = timescale / 1000;
            var millisecondsPerInterval = fragment.interval / ticksPerMillisecond;
            var millisecondsOffset = (timeSeconds - (fragment.start / timescale)) * 1000;
            var eventIndex = Math.floor(millisecondsOffset / millisecondsPerInterval);
            return fragment["events"][eventIndex];
        }
        function GetFaceEmotion(faceScores) {
            var faceScore = 0, faceEmotion;
            if (faceScores != null) {
                var keys = Object.keys(faceScores);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (faceScores[key] > faceScore) {
                        faceScore = faceScores[key];
                        faceEmotion = key[0].toUpperCase() + key.slice(1);
                    }
                }
            }
            return faceEmotion;
        }
        function GetFacesMetadata(playerHeight, playerWidth, timeSeconds, result) {
            var facesMetadata = new Array();
            var fragment = result.fragment
            if (fragment.events != null) {
                var frameHeight = result.height;
                var frameWidth = result.width;
                var scaleHeight = playerHeight / frameHeight;
                var scaleWidth = playerWidth / frameWidth;
                var fragmentEvent = GetFragmentEvent(timeSeconds, result.timescale, fragment);
                for (var i = 0; i < fragmentEvent.length; i++) {
                    var faceMetadata = {};
                    faceMetadata.id = fragmentEvent[i].id;
                    faceMetadata.label = "Face " + faceMetadata.id;
                    faceMetadata.x = fragmentEvent[i].x * frameWidth;
                    faceMetadata.x = faceMetadata.x * scaleWidth;
                    faceMetadata.y = fragmentEvent[i].y * frameHeight;
                    faceMetadata.y = faceMetadata.y * scaleHeight;
                    faceMetadata.height = fragmentEvent[i].height * frameHeight;
                    faceMetadata.height = faceMetadata.height * scaleHeight;
                    faceMetadata.width = fragmentEvent[i].width * frameWidth;
                    faceMetadata.width = faceMetadata.width * scaleWidth;
                    faceMetadata.emotion = GetFaceEmotion(fragmentEvent[i]["scores"]);
                    facesMetadata.push(faceMetadata);
                }
            }
            return facesMetadata;
        }
        function SetMediaMetadata() {
            var analyticsProcessor;
            var mediaPlayer = GetMediaPlayer(false);
            var fileName = $("#analyticsProcessors").val();
            if (fileName != null && fileName != "") {
                analyticsProcessor = GetAnalyticsProcessor(fileName);
                var playerHeight = mediaPlayer.height();
                var playerWidth = mediaPlayer.width();
                var timeSeconds = mediaPlayer.currentTime();
                $.post("/analytics/metadata",
                    {
                        fileName: fileName,
                        timeSeconds: timeSeconds
                    },
                    function (result) {
                        var jsonOptions = {
                            collapsed: false,
                            withQuotes: false
                        };
                        switch (analyticsProcessor) {
                            case "FaceDetection":
                                $("#mediaMetadata").jsonBrowse(result, jsonOptions);
                                var facesMetadata = GetFacesMetadata(playerHeight, playerWidth, timeSeconds, result);
                                for (var i = 0; i < facesMetadata.length; i++) {
                                    var faceMetadata = facesMetadata[i];
                                    SetVideoOverlay(faceMetadata);
                                }
                                break;
                            case "EmotionDetection":
                                var fragmentEvent = GetFragmentEvent(timeSeconds, result.timescale, result.fragment);
                                $("#mediaMetadata").jsonBrowse(fragmentEvent, jsonOptions);
                                break;
                        }
                    }
                );
            }
            return analyticsProcessor;
        }
        function SetVideoOverlay(faceMetadata) {
            $("<div id='videoOverlay" + faceMetadata.id + "' class='mediaOverlay'></div>").insertBefore("#videoPlayer");
            var playerPosition = $("#videoPlayer").position();
            $("#videoOverlay" + faceMetadata.id).css({
                top: (playerPosition.top + faceMetadata.y) + "px",
                left: (playerPosition.left + faceMetadata.x) + "px",
                height: faceMetadata.height + "px",
                width: faceMetadata.width + "px"
            });
            $("#videoOverlay" + faceMetadata.id).show();
            var faceLabel = faceMetadata.label;
            if (faceMetadata.emotion != null) {
                faceLabel = faceLabel + "<br /><br />(" + faceMetadata.emotion + ")";
            }
            CreateTipTop("videoOverlay" + faceMetadata.id, faceLabel, 0, 0, false);
            SetTipVisible("videoOverlay" + faceMetadata.id, true);
        }
        function ClearVideoOverlay() {
            var videoOverlays = $("div[id^='videoOverlay']");
            for (var i = 0; i < videoOverlays.length; i++) {
                var videoOverlay = videoOverlays[i];
                SetTipVisible(videoOverlay.id, false);
                $("#" + videoOverlay.id).remove();
            }
        }
        function ResetMediaMetadata() {
            ClearVideoOverlay();
            SetMediaMetadata();
        }
        $(function () {
            _mediaStreams = GetMediaStreams();
            _streamNumber = @streamNumber;
            _authToken = "@authToken";
            var mediaStream = (_mediaStreams.length == 0) ? null : _mediaStreams[_streamNumber - 1];
            var sliderWidth = $("#streamSlider").width();
            var sliderStep = (_mediaStreams.length < 2) ? sliderWidth : Math.floor(sliderWidth / (_mediaStreams.length - 1));
            var sliderValue = (_streamNumber - 1) * sliderStep;
            var accountMessage = "@accountMessage";
            $("#streamSlider").slider({
                min: 0,
                max: sliderWidth,
                step: sliderStep,
                value: sliderValue,
                classes: {
                    "ui-slider-handle": "streamSliderHandle"
                },
                slide: function (event, ui) {
                    if (_mediaStreams.length > 0) {
                        var streamNumber = (_mediaStreams.length == 1) ? 1 : (ui.value / sliderStep) + 1;
                        var mediaStream = _mediaStreams[streamNumber - 1];
                        var streamName = mediaStream.name;
                        var protectionTypes = mediaStream.protectionTypes;
                        if (protectionTypes.length > 0) {
                            streamName = streamName + "<br /><br />" + protectionTypes.join(", ");
                        }
                        CreateTipTopLeft("streamSlider", streamName, ui.value + 2, -15);
                        SetTipVisible("streamSlider", true);
                        SetStreamNumber(streamNumber);
                    }
                },
                stop: function (event, ui) {
                    if (_mediaStreams.length > 0) {
                        _streamNumber = (_mediaStreams.length == 1) ? 1 : (ui.value / sliderStep) + 1;
                        window.location.href = "/?stream=" + _streamNumber;
                    }
                }
            });
            var mediaPlayer = GetMediaPlayer(false);
            mediaPlayer.addEventListener(amp.eventName.play, function () {
                var streamUrl = mediaPlayer.currentSrc();
                streamUrl = streamUrl.replace("https:", "");
                streamUrl = streamUrl.replace("http:", "");
                streamUrl = streamUrl.split("/");
                for (var i = streamUrl.length - 2; i > streamUrl.length - 5; i--) {
                    streamUrl[i] = streamUrl[i] + "<br />";
                }
                streamUrl = streamUrl.join("/");
                $("#streamUrl").html(streamUrl);
                ClearVideoOverlay();
            });
            mediaPlayer.addEventListener(amp.eventName.pause, function () {
                if ($("#analyticsPanel").is(":visible")) {
                    SetMediaMetadata();
                }
            });
            mediaPlayer.addEventListener(amp.eventName.timeupdate, function () {
                var streamUrl = mediaPlayer.currentSrc();
                if (streamUrl.indexOf("Bright Future.ism") > -1) {
                    var currentTime = mediaPlayer.currentTime();
                    if (currentTime >= 15 && !$("#videoOverlay1").is(":visible")) {
                        var faceMetadata = {};
                        faceMetadata.id = 1;
                        faceMetadata.label = "Joshua Shahid<br /><br />(Future Solution Architect)";
                        faceMetadata.x = 80;
                        faceMetadata.y = 198;
                        faceMetadata.height = 20;
                        faceMetadata.width = 20;
                        SetVideoOverlay(faceMetadata);
                        faceMetadata = {};
                        faceMetadata.id = 2;
                        faceMetadata.label = "Jenna Shahid<br /><br />(Future Solution Architect)";
                        faceMetadata.x = 584;
                        faceMetadata.y = 192;
                        faceMetadata.height = 20;
                        faceMetadata.width = 20;
                        SetVideoOverlay(faceMetadata);
                    }
                }
            });
            window.onresize = ResetMediaMetadata;
            window.onorientationchange = ResetMediaMetadata;
            if (mediaStream == null) {
                SetPlayerSpinner(false);
            } else {
                SetPlayerContent(mediaStream, "@ViewData["languageCode"]", false, @autoPlay, "@authToken");
                SetAnalyticsProcessors(mediaStream);
                SetStreamNumber(_streamNumber);
                SetStreamName(mediaStream);
            }
            if (accountMessage != "") {
                DisplayMessage("Account Message", accountMessage);
            }
        })
    </script>
}

@section title {
    Azure Sky Media
}

<table class="mediaStreamer">
    <tr>
        <td>
            @Html.Partial("MediaPlayer", false)
        </td>
        <td id="analyticsPanel" class="analyticsPanel">
            <table>
                <tr>
                    <td class="inputLabel">
                        <span class="siteLink" onclick="window.open('http://docs.microsoft.com/en-us/azure/media-services/media-services-analytics-overview')">
                            Azure Media Analytics
                        </span>
                    </td>
                    <td>
                        <select id="analyticsProcessors" class="analyticsProcessors" onchange="SetMediaMetadata()"></select>
                    </td>
                </tr>
                <tr>
                    <td colspan="2">
                        <div id="mediaMetadata" class="mediaMetadata"></div>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>

@Html.Partial("MediaBar", mediaStreams)

<div id="clipperDialog" style="display: none">
    @Html.Partial("MediaPlayer", true)
</div>

<div class="streamInfo">
    <div id="streamName" class="streamName"></div>
    <div id="streamUrl" class="streamUrl"></div>
</div>

