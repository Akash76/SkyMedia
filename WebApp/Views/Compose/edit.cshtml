@{
    string ampVersion = ViewData["mediaPlayerVersion"] as string;
    string ampSkin = ViewData["mediaPlayerSkin"] as string;

    string amcVersion = ViewData["mediaClipperVersion"] as string;
}

@section head {
    <link type="text/css" rel="stylesheet" href="//amp.azure.net/libs/amp/@ampVersion/skins/@ampSkin/azuremediaplayer.min.css" />
    <link type="text/css" rel="stylesheet" href="//amp.azure.net/libs/amc/@amcVersion/azuremediaclipper.css">
    <script type="text/javascript" src="//amp.azure.net/libs/amp/@ampVersion/azuremediaplayer.min.js"></script>
    <script type="text/javascript" src="//amp.azure.net/libs/amc/@amcVersion/azuremediaclipper.min.js"></script>
    <script type="text/javascript">
        function LoadClipper(loadMode) {
            var autoPlay = false;
            var restVersion = "2.0";
            var clipperSelector = "#videoClipper";
            var onSubmitClip = function (clipData) {
                var promise = new Promise(function (resolve, reject) {
                    $.post("/asset/clip", {
                        clipData: clipData
                    })
                    .then(function (clip) {
                        resolve(true);
                    }).catch(function () {
                        reject();
                    });
                });
                return promise;
            };
            switch (loadMode) {
                case "static":
                    var clipper = new subclipper({
                        height: 600,
                        autoplayVideo: autoPlay,
                        restVersion: restVersion,
                        selector: clipperSelector,
                        submitSubclipCallback: onSubmitClip
                    });
                    SetCursor(true);
                    $.get("/compose/streams",
                        function (streams) {
                            SetCursor(false);
                            clipper.load(streams);
                        }
                    );
                    break;
                case "dynamic":
                    var onLoadPanel = function (searchCriteria, skipCount, takeCount, streamType) {
                        var promise = new Promise(function (resolve, reject) {
                            $.get("/compose/streams", {
                                searchCriteria: searchCriteria,
                                skipCount: skipCount,
                                takeCount: takeCount,
                                streamType: streamType
                            })
                            .then(function (streams) {
                                resolve({
                                    total: streams.length,
                                    assets: streams
                                });
                            }).catch(function () {
                                reject();
                            });
                        });
                        return promise;
                    };
                    var clipper = new subclipper({
                        height: 850,
                        autoplayVideo: autoPlay,
                        restVersion: restVersion,
                        selector: clipperSelector,
                        submitSubclipCallback: onSubmitClip,
                        assetsPanelLoaderCallback: onLoadPanel
                    });
                    break;
            }
        }
        $(function () {
            $("#assetLoadMode").change();
        })
    </script>
}

@section title {
    Media Edit
}

<div id="videoClipper" class="videoClipper azure-subclipper dark-skin"></div>

<div class="clipLoader">
    <span class="inputLabel">
        Asset Load Mode:
    </span>
    @Html.RadioButton("assetLoadMode", "dynamic", true, new { onchange = "LoadClipper(this.value)" })
    Dynamic
    @Html.RadioButton("assetLoadMode", "static", false, new { onchange = "LoadClipper(this.value)" })
    Static
</div>