@{
    string ampVersion = ViewData["mediaPlayerVersion"] as string;
    string ampSkin = ViewData["mediaPlayerSkin"] as string;

    string amcVersion = ViewData["mediaClipperVersion"] as string;
}

@section head {
    <link type="text/css" rel="stylesheet" href="//amp.azure.net/libs/amp/@ampVersion/skins/@ampSkin/azuremediaplayer.min.css" />
    <link type="text/css" rel="stylesheet" href="//amp.azure.net/libs/amc/@amcVersion/azuremediaclipper.css">
    <script type="text/javascript" src="//amp.azure.net/libs/amp/@ampVersion/azuremediaplayer.min.js"></script>
    <script type="text/javascript" src="//amp.azure.net/libs/amc/@amcVersion/azuremediaclipper.min.js"></script>
    <script type="text/javascript">
        function GetStreams(search, skip, take, type) {
            SetCursor(true);
            $.get("/asset/streams",
                {
                    searchCriteria: search,
                    skipCount: skip,
                    takeCount: take,
                    streamType: type
                },
                function (streams) {
                    SetCursor(false);
                }
            );
        }
        function CreateClip(clipData) {
            alert("CreateClip");
        }
        function LoadClipper(loadMode) {
            var autoPlay = false;
            var restVersion = "2.0";
            var clipperId = "videoClipper";
            switch (loadMode) {
                case "static":
                    var clipper = new subclipper({
                        height: 600,
                        autoplayVideo: autoPlay,
                        restVersion: restVersion,
                        selector: "#" + clipperId,
                        submitSubclipCallback: CreateClip
                    });
                    SetCursor(true);
                    $.get("/asset/streams",
                        function (streams) {
                            SetCursor(false);
                            clipper.load(streams);
                        }
                    );
                    break;
                case "dynamic":
                    var onLoadPanel = function (search, skip, take, type) {
                        var promise = new Promise(function (resolve, reject) {
                            // TODO: implement the getAssetsFromBackend method to get the assets from the back-end using the filter parameters (search, skip, take, type).
                            GetStreams(search, skip, take, type)
                                .then(function (assets) {
                                    resolve({
                                        total: assets.length,
                                        assets: assets
                                    });
                                }).catch(function () {
                                    reject(Error("error details"));
                                });
                        });
                        return promise;
                    };
                    var clipper = new subclipper({
                        height: 850,
                        autoplayVideo: autoPlay,
                        restVersion: restVersion,
                        selector: "#" + clipperId,
                        submitSubclipCallback: CreateClip,
                        assetsPanelLoaderCallback: onLoadPanel
                    });
                    break;
            }
        }
        $(function () {
            $("#clipLoadMode").change();
        })
    </script>
}

@section title {
    Azure Media Clipper
}

<div id="videoClipper" class="videoClipper azure-subclipper dark-skin"></div>

<div class="clipLoader">
    <span class="inputLabel">
        Media Asset Load Mode:
    </span>
    @Html.RadioButton("clipLoadMode", "static", true, new { onchange = "LoadClipper(this.value)" })
    Static
    @Html.RadioButton("clipLoadMode", "dynamic", false, new { onchange = "LoadClipper(this.value)" })
    Dynamic
</div>