{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageServiceName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "Name must be between 3 and 24 characters (letters and numbers only)."
      }
    },
    "storageServiceHttpsOnly": {
      "type": "bool",
      "metadata": {
        "description": "Designates if HTTPS is required to establish a storage connection."
      }
    },
    "storageServiceEncryptionEnabled": {
      "type": "bool",
      "metadata": {
        "description": "Designates if storage data encryption at rest is enabled."
      }
    },
    "databaseServiceName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 31,
      "metadata": {
        "description": "Name must be between 3 and 31 characters (letters, numbers and hyphens only)."
      }
    },
    "databaseServiceRegions": {
      "type": "string",
      "metadata": {
        "description": "Azure region names (delimited by semicolons) for data reads & writes (multi-master)."
      }
    },
    "searchServiceName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "metadata": {
        "description": "Name must be between 2 and 60 characters (letters, numbers and hyphens only)."
      }
    },
    "searchServiceRegion": {
      "type": "string",
      "metadata": {
        "description": "Azure region name for the Search resource."
      }
    },
    "searchServiceTier": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "Search resource tier, which determines the maximum number of search indexes, documents, scaling units, etc."
      }
    },
    "searchServiceReplicaCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Search replica count. 2 or more replicas are required for high availabiliy with Basic or Standard tiers."
      }
    },
    "searchServicePartitionCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Search partition count, which enables scaling of document count and faster indexing across search units."
      }
    },
    "contentDeliveryProfileName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 64,
      "metadata": {
        "description": "Name must be between 2 and 64 characters (letters, numbers and hyphens only)."
      }
    },
    "contentDeliveryProfileTier": {
      "type": "string",
      "allowedValues": [
        "Standard_Akamai",
        "Standard_Microsoft",
        "Standard_Verizon",
        "Premium_Verizon"
      ],
      "metadata": {
        "description": "Resource tier for the Content Delivery Network service."
      }
    },
    "contentDeliveryEndpointSubdomain": {
      "type": "string",
      "minLength": 2,
      "maxLength": 64,
      "metadata": {
        "description": "Subdomain name (<subdomain>.azureedge.net) must be between 2 and 64 characters (letters, numbers and hyphens only)."
      }
    },
    "contentDeliveryEndpointOriginPath": {
      "type": "string",
      "metadata": {
        "description": "Optional origin path (in the form '/path') relative to the origin root."
      }
    },
    "appInsightsRegion": {
      "type": "string",
      "metadata": {
        "description": "Azure region name for the Application Insights resource."
      }
    },
    "appInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Application Insights resource."
      }
    }
  },
  "variables": {
    "storageApiVersion": "2018-07-01",
    "storageServiceName": "[toLower(parameters('storageServiceName'))]",
    "databaseApiVersion": "2016-03-31",
    "databaseServiceName": "[toLower(parameters('databaseServiceName'))]",
    "databaseServiceNameStaging": "[concat(variables('databaseServiceName'), 'staging')]",
    "databaseServiceRegions": "[split(parameters('databaseServiceRegions'), ';')]",
    "searchApiVersion": "2015-08-19",
    "searchServiceName": "[toLower(parameters('searchServiceName'))]",
    "searchServiceTier": "[toLower(parameters('searchServiceTier'))]",
    "contentDeliveryApiVersion": "2018-04-02",
    "contentDeliveryEndpointSubdomain": "[toLower(parameters('contentDeliveryEndpointSubdomain'))]",
    "appInsightsApiVersion": "2018-05-01-preview"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('storageServiceName')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "supportsHttpsTrafficOnly": "[parameters('storageServiceHttpsOnly')]",
        "encryption": {
          "services": {
            "blob": {
              "enabled": "[parameters('storageServiceEncryptionEnabled')]"
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "[variables('databaseApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('databaseServiceName')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "enableMultipleWriteLocations": true,
        "copy": [
          {
            "name": "locations",
            "count": "[length(variables('databaseServiceRegions'))]",
            "input": {
              "locationName": "[variables('databaseServiceRegions')[copyIndex('locations')]]",
              "failoverPriority": "[copyIndex('locations')]"
            }
          }
        ],
        "tags": {
          "defaultExperience": "DocumentDB"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "[variables('databaseApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('databaseServiceNameStaging')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "enableMultipleWriteLocations": true,
        "copy": [
          {
            "name": "locations",
            "count": "[length(variables('databaseServiceRegions'))]",
            "input": {
              "locationName": "[variables('databaseServiceRegions')[copyIndex('locations')]]",
              "failoverPriority": "[copyIndex('locations')]"
            }
          }
        ],
        "tags": {
          "defaultExperience": "DocumentDB"
        }
      }
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "[variables('searchApiVersion')]",
      "location": "[parameters('searchServiceRegion')]",
      "name": "[variables('searchServiceName')]",
      "sku": {
        "name": "[variables('searchServiceTier')]"
      },
      "properties": {
        "replicaCount": "[parameters('searchServiceReplicaCount')]",
        "partitionCount": "[parameters('searchServicePartitionCount')]"
      }
    },
    {
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "[variables('contentDeliveryApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('contentDeliveryProfileName')]",
      "sku": {
        "name": "[parameters('contentDeliveryProfileTier')]"
      },
      "resources": [
        {
          "type": "endpoints",
          "apiVersion": "[variables('contentDeliveryApiVersion')]",
          "location": "[resourceGroup().location]",
          "name": "[variables('contentDeliveryEndpointSubdomain')]",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName'))]",
            "[resourceId('Microsoft.Cdn/profiles', parameters('contentDeliveryProfileName'))]"
          ],
          "properties": {
            "originHostHeader": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName'))).primaryEndpoints.blob, 'https://', ''), '/', '')]",
            "isHttpAllowed": false,
            "isHttpsAllowed": true,
            "origins": [
              {
                "name": "[variables('storageServiceName')]",
                "properties": {
                  "hostName": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName'))).primaryEndpoints.blob, 'https://', ''), '/', '')]"
                }
              }
            ],
            "originPath": "[parameters('contentDeliveryEndpointOriginPath')]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "[variables('appInsightsApiVersion')]",
      "location": "[parameters('appInsightsRegion')]",
      "name": "[parameters('appInsightsName')]",
      "kind": "web",
      "properties": {
      }
    }
  ],
  "outputs": {
    "storageConnection": {
      "type": "string",
      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
    },
    "databaseConnection": {
      "type": "string",
      "value": "[concat('AccountEndpoint=https://', variables('databaseServiceName'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceName')), variables('databaseApiVersion')).primaryMasterKey)]"
    },
    "databaseConnectionStaging": {
      "type": "string",
      "value": "[concat('AccountEndpoint=https://', variables('databaseServiceNameStaging'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceNameStaging')), variables('databaseApiVersion')).primaryMasterKey)]"
    },
    "contentDeliveryHost": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Cdn/profiles/endpoints', parameters('contentDeliveryProfileName'), variables('contentDeliveryEndpointSubdomain')), variables('contentDeliveryApiVersion')).hostName]"
    },
    "appInsightsKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), variables('appInsightsApiVersion')).instrumentationKey]"
    }
  }
}