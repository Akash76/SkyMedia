{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "directoryB2bTenantId": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2B tenant identifier."
      }
    },
    "directoryB2bTenantDomain": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2B tenant domain (including .onmicrosoft.com)."
      }
    },
    "directoryB2cTenantId": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2C tenant identifier."
      }
    },
    "directoryB2cTenantDomain": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2C tenant domain (including .onmicrosoft.com)."
      }
    },
    "directoryB2cPolicyIdSignUpIn": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2C Sign Up & In policy identifier."
      }
    },
    "storageServiceName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "Name must be between 3 and 24 characters (letters and numbers only)."
      }
    },
    "databaseServiceName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 31,
      "metadata": {
        "description": "Name must be between 3 and 31 characters (letters, numbers and hyphens only)."
      }
    },
    "databaseDataRegions": {
      "type": "array",
      "defaultValue": [
        "South Central US",
        "West US",
        "East US"
      ],
      "metadata": {
        "description": "Array of Azure region names for data replication. The first region listed will be read/write enabled while the other regions listed will be readonly enabled."
      }
    },
    "searchServiceName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "metadata": {
        "description": "Name must be between 2 and 60 characters (letters, numbers and hyphens only)."
      }
    },
    "searchServiceRegion": {
      "type": "string",
      "defaultValue": "South Central US",
      "metadata": {
        "description": "Azure region name for deployment of the Search service resource."
      }
    },
    "searchServiceTier": {
      "type": "string",
      "defaultValue": "Basic",
      "metadata": {
        "description": "Search service resource tier, which determines the maximum number of search indexes, documents, scaling units, etc."
      }
    },
    "searchServiceReplicaCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Search service replica count. 2 or more replicas are required for high availabiliy with Basic or Standard service tiers."
      }
    },
    "searchServicePartitionCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Search service partition count, which enables scaling of document count and faster indexing across multiple search units."
      }
    },
    "functionAppName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "metadata": {
        "description": "Name must be between 2 and 60 characters (letters, numbers and hyphens only)."
      }
    },
    "contentDeliveryProfileName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 64,
      "metadata": {
        "description": "Name must be between 2 and 64 characters (letters, numbers and hyphens only)."
      }
    },
    "contentDeliveryProfileTier": {
      "type": "string",
      "defaultValue": "Standard_Akamai",
      "allowedValues": [
        "Standard_Verizon",
        "Premium_Verizon",
        "Standard_Akamai"
      ],
      "metadata": {
        "description": "Resource tier for the Content Delivery Network service."
      }
    },
    "contentDeliveryEndpointSubdomain": {
      "type": "string",
      "minLength": 2,
      "maxLength": 64,
      "metadata": {
        "description": "Subdomain name (<subdomain>.azureedge.net) must be between 2 and 64 characters (letters, numbers and hyphens only)."
      }
    },
    "contentDeliveryEndpointOriginPath": {
      "type": "string",
      "metadata": {
        "description": "Optional origin path (in the form /path relative to the origin root)."
      }
    },
    "trafficManagerSubdomainName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 64,
      "metadata": {
        "description": "Subdomain name (<subdomain>.trafficmanager.net) must be between 2 and 64 characters (letters, numbers and hyphens only)."
      }
    },
    "trafficManagerRoutingMethod": {
      "type": "string",
      "defaultValue": "Performance",
      "allowedValues": [
        "Performance",
        "Weighted",
        "Priority",
        "Geographic"
      ],
      "metadata": {
        "description": "Routing method for the Traffic Manager resource."
      }
    },
    "trafficManagerRoutingTimeToLive": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Routing record time-to-live (in seconds) for the Traffic Manager resource."
      }
    },
    "trafficManagerAppResourceGroupNames": {
      "type": "array",
      "metadata": {
        "description": "App Service web application resource group names for the Traffic Manager resource."
      }
    },
    "trafficManagerAppEndpointNames": {
      "type": "array",
      "metadata": {
        "description": "App Service web application endpoint names for the Traffic Manager resource."
      }
    },
    "appInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Application Insights service resource."
      }
    },
    "appInsightsRegion": {
      "type": "string",
      "defaultValue": "South Central US",
      "metadata": {
        "description": "Azure region name for deployment of the Application Insights service resource."
      }
    }
  },
  "variables": {
    "storageApiVersion": "2017-06-01",
    "storageServiceName": "[toLower(parameters('storageServiceName'))]",
    "databaseApiVersion": "2016-03-31",
    "databaseServiceName": "[toLower(parameters('databaseServiceName'))]",
    "searchApiVersion": "2015-08-19",
    "searchServiceName": "[toLower(parameters('searchServiceName'))]",
    "searchServiceTier": "[toLower(parameters('searchServiceTier'))]",
    "webSiteApiVersion": "2016-08-01",
    "functionAppName": "[toLower(parameters('functionAppName'))]",
    "contentDeliveryApiVersion": "2017-04-02",
    "contentDeliveryEndpointSubdomain": "[toLower(parameters('contentDeliveryEndpointSubdomain'))]",
    "trafficManagerApiVersion": "2017-05-01",
    "trafficManagerSubdomainName": "[toLower(parameters('trafficManagerSubdomainName'))]",
    "trafficManagerSubdomainNameStaging": "[concat(variables('trafficManagerSubdomainName'), '-staging')]",
    "appInsightsApiVersion": "2015-05-01"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('storageServiceName')]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "[variables('databaseApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('databaseServiceName')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "copy": [
          {
            "name": "locations",
            "count": "[length(parameters('databaseDataRegions'))]",
            "input": {
              "locationName": "[parameters('databaseDataRegions')[copyIndex('locations')]]",
              "failoverPriority": "[copyIndex('locations')]"
            }
          }
        ],
        "tags": {
          "defaultExperience": "DocumentDB"
        }
      }
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "[variables('searchApiVersion')]",
      "location": "[parameters('searchServiceRegion')]",
      "name": "[variables('searchServiceName')]",
      "sku": {
        "name": "[variables('searchServiceTier')]"
      },
      "properties": {
        "replicaCount": "[parameters('searchServiceReplicaCount')]",
        "partitionCount": "[parameters('searchServicePartitionCount')]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "[variables('webSiteApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('functionAppName')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
      ],
      "properties": {
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), variables('appInsightsApiVersion')).instrumentationKey]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "6.5.0"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "functionapp"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "Directory.DefaultId",
              "value": "B2C"
            },
            {
              "name": "Directory.B2B.TenantId",
              "value": "[parameters('directoryB2bTenantId')]"
            },
            {
              "name": "Directory.B2B.TenantDomain",
              "value": "[parameters('directoryB2bTenantDomain')]"
            },
            {
              "name": "Directory.B2B.IssuerUrl",
              "value": "https://login.microsoftonline.com/{0}/"
            },
            {
              "name": "Directory.B2B.DiscoveryUrl",
              "value": "https://login.microsoftonline.com/{0}/.well-known/openid-configuration"
            },
            {
              "name": "Directory.B2C.TenantId",
              "value": "[parameters('directoryB2cTenantId')]"
            },
            {
              "name": "Directory.B2C.TenantDomain",
              "value": "[parameters('directoryB2cTenantDomain')]"
            },
            {
              "name": "Directory.B2C.IssuerUrl",
              "value": "https://login.microsoftonline.com/{0}/v2.0/"
            },
            {
              "name": "Directory.B2C.DiscoveryUrl",
              "value": "https://login.microsoftonline.com/{0}/v2.0/.well-known/openid-configuration"
            },
            {
              "name": "Directory.B2C.PolicyId.SignUpIn",
              "value": "[parameters('directoryB2cPolicyIdSignUpIn')]"
            },
            {
              "name": "Storage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "Database.Document",
              "value": "[concat('AccountEndpoint=https://', variables('databaseServiceName'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceName')), variables('databaseApiVersion')).primaryMasterKey)]"
            },
            {
              "name": "Database.Table",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('databaseServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceName')), variables('databaseApiVersion')).primaryMasterKey, ';TableEndpoint=https://', variables('databaseServiceName'), '.documents.azure.com')]"
            },
            {
              "name": "Media.Indexer.ServiceUrl",
              "value": "https://videobreakdown.azure-api.net/Breakdowns/Api/Partner"
            },
            {
              "name": "Media.Publish.ContentQueue",
              "value": "publish-content"
            },
            {
              "name": "Media.Publish.InsightQueue",
              "value": "publish-insight"
            },
            {
              "name": "Media.Locator.WriteDurationMinutes",
              "value": 60
            },
            {
              "name": "Media.Locator.ReadDurationDays",
              "value": 30
            },
            {
              "name": "Media.Locator.AutoRenewal",
              "value": true
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "[variables('contentDeliveryApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('contentDeliveryProfileName')]",
      "sku": {
        "name": "[parameters('contentDeliveryProfileTier')]"
      },
      "resources": [
        {
          "type": "endpoints",
          "apiVersion": "[variables('contentDeliveryApiVersion')]",
          "location": "[resourceGroup().location]",
          "name": "[variables('contentDeliveryEndpointSubdomain')]",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName'))]",
            "[resourceId('Microsoft.Cdn/profiles', parameters('contentDeliveryProfileName'))]"
          ],
          "properties": {
            "originHostHeader": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName'))).primaryEndpoints.blob, 'https://', ''), '/', '')]",
            "origins": [
              {
                "name": "[variables('storageServiceName')]",
                "properties": {
                  "hostName": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName'))).primaryEndpoints.blob, 'https://', ''), '/', '')]"
                }
              }
            ],
            "originPath": "[parameters('contentDeliveryEndpointOriginPath')]",
            "queryStringCachingBehavior": "IgnoreQueryString",
            "isHttpAllowed": true,
            "isHttpsAllowed": true,
            "isCompressionEnabled": true,
            "contentTypesToCompress": [
              "application/x-javascript",
              "text/javascript",
              "text/plain",
              "text/html",
              "text/css"
            ]
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/trafficManagerProfiles",
      "apiVersion": "[variables('trafficManagerApiVersion')]",
      "location": "global",
      "name": "[variables('trafficManagerSubdomainName')]",
      "properties": {
        "trafficRoutingMethod": "[parameters('trafficManagerRoutingMethod')]",
        "dnsConfig": {
          "relativeName": "[variables('trafficManagerSubdomainName')]",
          "ttl": "[parameters('trafficManagerRoutingTimeToLive')]"
        },
        "monitorConfig": {
          "protocol": "HTTP",
          "port": 80,
          "path": "/"
        }
      }
    },
    {
      "type": "Microsoft.Network/trafficManagerProfiles",
      "apiVersion": "[variables('trafficManagerApiVersion')]",
      "location": "global",
      "name": "[variables('trafficManagerSubdomainNameStaging')]",
      "properties": {
        "trafficRoutingMethod": "[parameters('trafficManagerRoutingMethod')]",
        "dnsConfig": {
          "relativeName": "[variables('trafficManagerSubdomainNameStaging')]",
          "ttl": "[parameters('trafficManagerRoutingTimeToLive')]"
        },
        "monitorConfig": {
          "protocol": "HTTP",
          "port": 80,
          "path": "/"
        }
      }
    },
    {
      "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
      "apiVersion": "[variables('trafficManagerApiVersion')]",
      "location": "global",
      "name": "[concat(variables('trafficManagerSubdomainName'), '/', parameters('trafficManagerAppEndpointNames')[copyIndex('endpointNames')])]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/trafficManagerProfiles', variables('trafficManagerSubdomainName'))]"
      ],
      "copy": {
        "name": "endpointNames",
        "count": "[length(parameters('trafficManagerAppEndpointNames'))]"
      },
      "properties": {
        "targetResourceId": "[resourceId(parameters('trafficManagerAppResourceGroupNames')[copyIndex('endpointNames')], 'Microsoft.Web/sites', toLower(parameters('trafficManagerAppEndpointNames')[copyIndex('endpointNames')]))]",
        "endpointStatus": "Enabled"
      }
    },
    {
      "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
      "apiVersion": "[variables('trafficManagerApiVersion')]",
      "location": "global",
      "name": "[concat(variables('trafficManagerSubdomainNameStaging'), '/', concat(parameters('trafficManagerAppEndpointNames')[copyIndex('endpointNames')]), '-Staging')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/trafficManagerProfiles', variables('trafficManagerSubdomainNameStaging'))]"
      ],
      "copy": {
        "name": "endpointNames",
        "count": "[length(parameters('trafficManagerAppEndpointNames'))]"
      },
      "properties": {
        "targetResourceId": "[resourceId(parameters('trafficManagerAppResourceGroupNames')[copyIndex('endpointNames')], 'Microsoft.Web/sites/slots', toLower(parameters('trafficManagerAppEndpointNames')[copyIndex('endpointNames')]), 'staging')]",
        "endpointStatus": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "[variables('appInsightsApiVersion')]",
      "location": "[parameters('appInsightsRegion')]",
      "name": "[parameters('appInsightsName')]",
      "kind": "web",
      "properties": {
      }
    }
  ],
  "outputs": {
    "storageConnection": {
      "type": "string",
      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
    },
    "databaseDocumentConnection": {
      "type": "string",
      "value": "[concat('AccountEndpoint=https://', variables('databaseServiceName'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceName')), variables('databaseApiVersion')).primaryMasterKey)]"
    },
    "databaseTableConnection": {
      "type": "string",
      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('databaseServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceName')), variables('databaseApiVersion')).primaryMasterKey, ';TableEndpoint=https://', variables('databaseServiceName'), '.documents.azure.com')]"
    },
    "functionAppHost": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), variables('webSiteApiVersion')).hostNames[0]]"
    },
    "contentDeliveryHost": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Cdn/profiles/endpoints', parameters('contentDeliveryProfileName'), variables('contentDeliveryEndpointSubdomain')), variables('contentDeliveryApiVersion')).hostName]"
    },
    "trafficManagerHost": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/trafficManagerProfiles', variables('trafficManagerSubdomainName')), variables('trafficManagerApiVersion')).dnsConfig.fqdn]"
    },
    "trafficManagerHostStaging": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/trafficManagerProfiles', variables('trafficManagerSubdomainNameStaging')), variables('trafficManagerApiVersion')).dnsConfig.fqdn]"
    },
    "appInsightsKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), variables('appInsightsApiVersion')).instrumentationKey]"
    }
  }
}