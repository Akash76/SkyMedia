{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageServiceName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 17,
      "metadata": {
        "description": "Name must be between 3 and 17 characters (letters and numbers only)."
      }
    },
    "storageServiceHttpsOnly": {
      "type": "bool",
      "metadata": {
        "description": "Designates if HTTPS is required to establish a storage connection."
      }
    },
    "storageServiceEncryptionEnabled": {
      "type": "bool",
      "metadata": {
        "description": "Designates if storage data encryption at rest is enabled."
      }
    },
    "appServicePlanName": {
      "type": "string",
      "metadata": {
        "description": "Name of the App Service Plan for the web application."
      }
    },
    "appServicePlanTier": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "Compute resource tier for the App Service Plan."
      }
    },
    "appServicePlanNodeSize": {
      "type": "string",
      "defaultValue": "S1",
      "metadata": {
        "description": "Size of each compute node within the App Service Plan."
      }
    },
    "appServicePlanNodeCountMinimum": {
      "type": "int",
      "minValue": 1,
      "metadata": {
        "description": "Minimum number of compute nodes within the App Service Plan."
      }
    },
    "appServicePlanNodeCountMaximum": {
      "type": "int",
      "minValue": 1,
      "metadata": {
        "description": "Maximum number of compute nodes within the App Service Plan."
      }
    },
    "webAppName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "metadata": {
        "description": "Subdomain name (<subdomain>.azurewebsites.net) must be between 2 and 60 characters (letters, numbers and hyphens only)."
      }
    },
    "webAppHostNames": {
      "type": "array",
      "metadata": {
        "description": "List of custom host names for the web application."
      }
    },
    "webAppPfxCertificateBase64": {
      "type": "securestring",
      "metadata": {
        "description": "Base64 encoding of web application private certificate for SSL host name binding."
      }
    },
    "webAppPfxCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password of web application private certificate for SSL host name binding."
      }
    },
    "functionAppName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "metadata": {
        "description": "Subdomain name (<subdomain>.azurewebsites.net) must be between 2 and 60 characters (letters, numbers and hyphens only)."
      }
    },
    "functionPublishUrl": {
      "type": "string",
      "metadata": {
        "description": "Function HTTP post url for media content publishing."
      }
    },
    "functionSyncSchedule": {
      "type": "string",
      "metadata": {
        "description": "Function timer schedule for media account sync."
      }
    },
    "globalServicesResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Name of the global services resource group."
      }
    },
    "directoryTenantId": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2C tenant identifier."
      }
    },
    "directoryAuthorityUrl": {
      "type": "string",
      "defaultValue": "https://login.microsoftonline.com/{0}/v2.0/",
      "metadata": {
        "description": "Azure Active Directory B2C tenant authority url."
      }
    },
    "directoryDiscoveryPath": {
      "type": "string",
      "defaultValue": ".well-known/openid-configuration",
      "metadata": {
        "description": "Azure Active Directory B2C Open ID Connect Discovery path."
      }
    },
    "directoryPolicyIdSignUpIn": {
      "type": "string",
      "defaultValue": "B2C_1_SignUpIn",
      "metadata": {
        "description": "Azure Active Directory B2C sign up/in policy identifier."
      }
    },
    "directoryClientId": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2C client application (production) identifier."
      }
    },
    "directoryClientSecret": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2C client application (production) secret."
      }
    },
    "directoryClientIdStaging": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2C client application (staging) identifier."
      }
    },
    "directoryClientSecretStaging": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory B2C client application (staging) secret."
      }
    },
    "databaseServiceName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 31,
      "metadata": {
        "description": "Name must be between 3 and 31 characters (letters, numbers and hyphens only)."
      }
    },
    "databaseServiceRegions": {
      "type": "string",
      "metadata": {
        "description": "Azure region names (delimited by semicolons) for data reads & writes (multi-master)."
      }
    },
    "databaseIdentifier": {
      "type": "string",
      "defaultValue": "Media",
      "metadata": {
        "description": "Unique identifier of the metadata database."
      }
    },
    "searchServiceName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "metadata": {
        "description": "Name must be between 2 and 60 characters (letters, numbers and hyphens only)."
      }
    },
    "searchAdminKey": {
      "type": "string",
      "metadata": {
        "description": "Admin key for the Search service."
      }
    },
    "searchQueryKey": {
      "type": "string",
      "metadata": {
        "description": "Query key for the Search service."
      }
    },
    "appRegionName": {
      "type": "string",
      "metadata": {
        "description": "Region display name for the web application."
      }
    },
    "appInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Application Insights resource."
      }
    },
    "twilioAccountId": {
      "type": "string",
      "metadata": {
        "description": "Twilio account identifier."
      }
    },
    "twilioAccountToken": {
      "type": "string",
      "metadata": {
        "description": "Twilio account auth token."
      }
    },
    "twilioMessageFrom": {
      "type": "string",
      "metadata": {
        "description": "Twilio message from phone number."
      }
    }
  },
  "variables": {
    "storageApiVersion": "2018-07-01",
    "storageServiceName": "[toLower(parameters('storageServiceName'))]",
    "storageServiceNameStaging": "[concat(variables('storageServiceName'), 'staging')]",
    "webApiVersion": "2018-02-01",
    "webAppName": "[toLower(parameters('webAppName'))]",
    "webAppNameStaging": "[concat(variables('webAppName'), '-staging')]",
    "webAppCertificateName": "[concat(variables('webAppName'), '-certificate')]",
    "functionAppName": "[toLower(parameters('functionAppName'))]",
    "functionAppNameStaging": "[concat(variables('functionAppName'), '-staging')]",
    "databaseApiVersion": "2016-03-31",
    "databaseServiceName": "[toLower(parameters('databaseServiceName'))]",
    "databaseServiceNameStaging": "[concat(variables('databaseServiceName'), 'staging')]",
    "appRegionNameStaging": "[concat(parameters('appRegionName'), ' - Staging')]",
    "appInsightsApiVersion": "2018-05-01-preview",
    "cognitiveApiVersion": "2017-04-18",
    "botApiVersion": "2018-07-12"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('storageServiceName')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "supportsHttpsTrafficOnly": "[parameters('storageServiceHttpsOnly')]",
        "encryption": {
          "services": {
            "blob": {
              "enabled": "[parameters('storageServiceEncryptionEnabled')]"
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('storageServiceNameStaging')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "supportsHttpsTrafficOnly": "[parameters('storageServiceHttpsOnly')]",
        "encryption": {
          "services": {
            "blob": {
              "enabled": "[parameters('storageServiceEncryptionEnabled')]"
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Web/serverFarms",
      "apiVersion": "[variables('webApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[parameters('appServicePlanName')]",
      "sku": {
        "tier": "[parameters('appServicePlanTier')]",
        "name": "[parameters('appServicePlanNodeSize')]",
        "capacity": "[parameters('appServicePlanNodeCountMinimum')]"
      }
    },
    {
      "type": "Microsoft.Web/certificates",
      "apiVersion": "[variables('webApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('webAppCertificateName')]",
      "properties": {
        "pfxBlob": "[parameters('webAppPfxCertificateBase64')]",
        "password": "[parameters('webAppPfxCertificatePassword')]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "[variables('webApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('webAppName')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms', parameters('appServicePlanName'))]",
        "[resourceId('Microsoft.Web/certificates', variables('webAppCertificateName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', parameters('appServicePlanName'))]",
        "siteConfig": {
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          },
          "apiDefinition": {
            "url": "/swagger/v1/swagger.json"
          },
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId(parameters('globalServicesResourceGroup'), 'Microsoft.Insights/components', parameters('appInsightsName')), variables('appInsightsApiVersion')).instrumentationKey]"
            },
            {
              "name": "App.RegionName",
              "value": "[parameters('appRegionName')]"
            },
            {
              "name": "Directory.ClientId",
              "value": "[parameters('directoryClientId')]"
            },
            {
              "name": "Directory.ClientSecret",
              "value": "[parameters('directoryClientSecret')]"
            },
            {
              "name": "Storage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "Database",
              "value": "[concat('AccountEndpoint=https://', variables('databaseServiceName'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId(parameters('globalServicesResourceGroup'), 'Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceName')), variables('databaseApiVersion')).primaryMasterKey, ';DatabaseId=', parameters('databaseIdentifier'))]"
            },
            {
              "name": "Database.Regions",
              "value": "[parameters('databaseServiceRegions')]"
            },
            {
              "name": "Media.Publish.JobUrl",
              "value": "[parameters('functionPublishUrl')]"
            },
            {
              "name": "Search.ServiceName",
              "value": "[parameters('searchServiceName')]"
            },
            {
              "name": "Search.AdminKey",
              "value": "[parameters('searchAdminKey')]"
            },
            {
              "name": "Search.QueryKey",
              "value": "[parameters('searchQueryKey')]"
            }
          ]
        },
        "clientAffinityEnabled": false
      },
      "resources": [
        {
          "type": "config",
          "apiVersion": "[variables('webApiVersion')]",
          "name": "slotconfignames",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
          ],
          "properties": {
            "appSettingNames": [
              "APPINSIGHTS_INSTRUMENTATIONKEY",
              "App.RegionName",
              "Directory.ClientId",
              "Directory.ClientSecret",
              "Storage",
              "Database",
              "Database.Regions"
            ]
          }
        },
        {
          "type": "slots",
          "apiVersion": "[variables('webApiVersion')]",
          "location": "[resourceGroup().location]",
          "name": "staging",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
          ],
          "properties": {
            "siteConfig": {
              "cors": {
                "allowedOrigins": [
                  "*"
                ]
              },
              "apiDefinition": {
                "url": "/swagger/v1/swagger.json"
              },
              "appSettings": [
                {
                  "name": "App.RegionName",
                  "value": "[variables('appRegionNameStaging')]"
                },
                {
                  "name": "Directory.ClientId",
                  "value": "[parameters('directoryClientIdStaging')]"
                },
                {
                  "name": "Directory.ClientSecret",
                  "value": "[parameters('directoryClientSecretStaging')]"
                },
                {
                  "name": "Storage",
                  "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceNameStaging'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceNameStaging')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
                },
                {
                  "name": "Database",
                  "value": "[concat('AccountEndpoint=https://', variables('databaseServiceNameStaging'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId(parameters('globalServicesResourceGroup'), 'Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceNameStaging')), variables('databaseApiVersion')).primaryMasterKey, ';DatabaseId=', parameters('databaseIdentifier'))]"
                },
                {
                  "name": "Database.Regions",
                  "value": "[parameters('databaseServiceRegions')]"
                },
                {
                  "name": "Media.Publish.JobUrl",
                  "value": "[parameters('functionPublishUrl')]"
                },
                {
                  "name": "Search.ServiceName",
                  "value": "[parameters('searchServiceName')]"
                },
                {
                  "name": "Search.AdminKey",
                  "value": "[parameters('searchAdminKey')]"
                },
                {
                  "name": "Search.QueryKey",
                  "value": "[parameters('searchQueryKey')]"
                }
              ]
            },
            "clientAffinityEnabled": false
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "[variables('webApiVersion')]",
      "name": "[concat(variables('webAppName'), '/', parameters('webAppHostNames')[copyIndex('hostNames')])]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]",
        "[resourceId('Microsoft.Web/certificates', variables('webAppCertificateName'))]"
      ],
      "copy": {
        "mode": "Serial",
        "name": "hostNames",
        "count": "[length(parameters('webAppHostNames'))]"
      },
      "properties": {
        "thumbprint": "[reference(resourceId('Microsoft.Web/certificates', variables('webAppCertificateName'))).Thumbprint]",
        "sslState": "SniEnabled"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "[variables('webApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('functionAppName')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceNameStaging'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName'))]"
      ],
      "properties": {
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId(parameters('globalServicesResourceGroup'), 'Microsoft.Insights/components', parameters('appInsightsName')), variables('appInsightsApiVersion')).instrumentationKey]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "beta"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[variables('functionAppName')]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "Arm.ServiceUrl",
              "value": "https://management.azure.com/"
            },
            {
              "name": "Arm.TokenScope",
              "value": "https://management.core.windows.net/.default"
            },
            {
              "name": "Directory.ClientId",
              "value": "[parameters('directoryClientId')]"
            },
            {
              "name": "Directory.TenantId",
              "value": "[parameters('directoryTenantId')]"
            },
            {
              "name": "Directory.AuthorityUrl",
              "value": "[parameters('directoryAuthorityUrl')]"
            },
            {
              "name": "Directory.DiscoveryPath",
              "value": "[parameters('directoryDiscoveryPath')]"
            },
            {
              "name": "Directory.PolicyId.SignUpIn",
              "value": "[parameters('directoryPolicyIdSignUpIn')]"
            },
            {
              "name": "Storage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceName')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "Storage.SharedAccessMinutes",
              "value": "60"
            },
            {
              "name": "Database",
              "value": "[concat('AccountEndpoint=https://', variables('databaseServiceName'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId(parameters('globalServicesResourceGroup'), 'Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceName')), variables('databaseApiVersion')).primaryMasterKey, ';DatabaseId=', parameters('databaseIdentifier'))]"
            },
            {
              "name": "Database.Regions",
              "value": "[parameters('databaseServiceRegions')]"
            },
            {
              "name": "Media.Indexer.ApiUrl",
              "value": "https://api.videoindexer.ai/"
            },
            {
              "name": "Media.Publish.JobUrl",
              "value": "[parameters('functionPublishUrl')]"
            },
            {
              "name": "Media.Sync.Schedule",
              "value": "[parameters('functionSyncSchedule')]"
            },
            {
              "name": "Twilio.Account.Id",
              "value": "[parameters('twilioAccountId')]"
            },
            {
              "name": "Twilio.Account.Token",
              "value": "[parameters('twilioAccountToken')]"
            },
            {
              "name": "Twilio.Message.From",
              "value": "[parameters('twilioMessageFrom')]"
            }
          ]
        },
        "resources": [
          {
            "type": "config",
            "apiVersion": "[variables('webApiVersion')]",
            "name": "slotconfignames",
            "dependsOn": [
              "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
            ],
            "properties": {
              "appSettingNames": [
                "APPINSIGHTS_INSTRUMENTATIONKEY",
                "App.RegionName",
                "Directory.ClientId",
                "Directory.ClientSecret",
                "Storage",
                "Database",
                "Database.Regions"
              ]
            }
          },
          {
            "type": "slots",
            "apiVersion": "[variables('webApiVersion')]",
            "location": "[resourceGroup().location]",
            "name": "staging",
            "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceNameStaging'))]",
              "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
            ],
            "properties": {
              "siteConfig": {
                "appSettings": [
                  {
                    "name": "FUNCTIONS_EXTENSION_VERSION",
                    "value": "beta"
                  },
                  {
                    "name": "WEBSITE_CONTENTSHARE",
                    "value": "[variables('functionAppNameStaging')]"
                  },
                  {
                    "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceNameStaging'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceNameStaging')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
                  },
                  {
                    "name": "AzureWebJobsStorage",
                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceNameStaging'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceNameStaging')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
                  },
                  {
                    "name": "AzureWebJobsDashboard",
                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceNameStaging'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceNameStaging')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
                  },
                  {
                    "name": "Arm.ServiceUrl",
                    "value": "https://management.azure.com/"
                  },
                  {
                    "name": "Arm.TokenScope",
                    "value": "https://management.core.windows.net/.default"
                  },
                  {
                    "name": "Directory.ClientId",
                    "value": "[parameters('directoryClientIdStaging')]"
                  },
                  {
                    "name": "Directory.TenantId",
                    "value": "[parameters('directoryTenantId')]"
                  },
                  {
                    "name": "Directory.AuthorityUrl",
                    "value": "[parameters('directoryAuthorityUrl')]"
                  },
                  {
                    "name": "Directory.DiscoveryPath",
                    "value": "[parameters('directoryDiscoveryPath')]"
                  },
                  {
                    "name": "Directory.PolicyId.SignUpIn",
                    "value": "[parameters('directoryPolicyIdSignUpIn')]"
                  },
                  {
                    "name": "Storage",
                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageServiceNameStaging'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageServiceNameStaging')), variables('storageApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]"
                  },
                  {
                    "name": "Storage.SharedAccessMinutes",
                    "value": "60"
                  },
                  {
                    "name": "Database",
                    "value": "[concat('AccountEndpoint=https://', variables('databaseServiceNameStaging'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId(parameters('globalServicesResourceGroup'), 'Microsoft.DocumentDB/databaseAccounts', variables('databaseServiceNameStaging')), variables('databaseApiVersion')).primaryMasterKey, ';DatabaseId=', parameters('databaseIdentifier'))]"
                  },
                  {
                    "name": "Database.Regions",
                    "value": "[parameters('databaseServiceRegions')]"
                  },
                  {
                    "name": "Media.Indexer.ApiUrl",
                    "value": "https://api.videoindexer.ai/"
                  },
                  {
                    "name": "Media.Publish.JobUrl",
                    "value": "[parameters('functionPublishUrl')]"
                  },
                  {
                    "name": "Media.Sync.Schedule",
                    "value": "[parameters('functionSyncSchedule')]"
                  },
                  {
                    "name": "Twilio.Account.Id",
                    "value": "[parameters('twilioAccountId')]"
                  },
                  {
                    "name": "Twilio.Account.Token",
                    "value": "[parameters('twilioAccountToken')]"
                  },
                  {
                    "name": "Twilio.Message.From",
                    "value": "[parameters('twilioMessageFrom')]"
                  }
                ]
              }
            }
          }
        ]
      }
    }
  ],
  "outputs": {
  }
}