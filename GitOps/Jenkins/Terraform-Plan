pipeline {
  agent any
  parameters {
    string(name: 'ARM_TENANT_ID', defaultValue: '72f988bf-86f1-41af-91ab-2d7cd011db47')
    string(name: 'ARM_SUBSCRIPTION_ID', defaultValue: '3d07cfbc-17aa-41b4-baa1-488fef85a1d3')
    string(name: 'ARM_USE_MSI', defaultValue: 'true')
    string(name: 'TF_IN_AUTOMATION', defaultValue: 'true')
    string(name: 'TF_BACKEND_CONFIG', defaultValue: '/tfBackendConfig.txt')
  }
  options {
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericHeaderVariables: [
        [key: 'x-github-event']
      ],
      genericVariables: [
        [key: 'event_action', value: '$.action'],
        [key: 'pull_request_id', value: '$.pull_request.number'],
        [key: 'pull_request_hash', value: '$.pull_request.head.sha'],
        [key: 'pull_request_branch', value: '$.pull_request.head.ref'],
        [key: 'pull_request_repository_url', value: '$.pull_request.head.repo.url'],
        [key: 'pull_request_repository_name', value: '$.pull_request.head.repo.name']
      ],
      causeString: 'Pull Request $pull_request_id $event_action on $pull_request_branch branch in $pull_request_repository_name repository',
      regexpFilterExpression: '(pull_request).(opened|reopened|synchronize)',
      regexpFilterText: '$x_github_event.$event_action',
    )
  }
  stages {
    stage('GitHub Pull Request') {
      steps {
        sh '''#!/bin/bash -ex
          git clean -dff
          for changedFile in $(git diff --name-only $GIT_COMMIT $pull_request_hash)
          do
            if [ ${changedFile: -3} == ".tf" ]
            then
              echo -n "$(dirname $changedFile)" > tfFileDirectory.txt
              echo -n "$changedFile" > tfFilePath.txt
              break
            fi
          done
        '''
      }
    }
    stage('Terraform Init & Plan') {
      when {
        expression {
          fileExists('tfFilePath.txt')
        }
      }
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'gitHubApp', usernameVariable: 'GITHUB_APP_ID', keyFileVariable: 'GITHUB_APP_KEY')]) {
          sh '''#!/bin/bash -ex
            tfStateFile="$(sed 's|/|-|g' tfFilePath.txt)state"
            cd $(cat tfFileDirectory.txt)
            echo 'terraform {' > backend.tf
            echo 'backend "azurerm" {}' >> backend.tf
            echo '}' >> backend.tf
            terraform init -input=false -backend-config="$WORKSPACE$TF_BACKEND_CONFIG" -backend-config="key=$tfStateFile" -no-color
            gitHubAppToken=$(python3 $WORKSPACE/getAppToken.py $GITHUB_APP_ID "$GITHUB_APP_KEY" 180 'RS256')
            echo $gitHubAppToken
            #terraform plan -input=false -out=tfPlan.bin -no-color &> tfPlan.txt
          '''
        }
      }
    }
    stage('Build Artifacts Storage') {
      when {
        expression {
          fileExists('tfFileDirectory.txt')
        }
        expression {
          dir(readFile('tfFileDirectory.txt')) {
            fileExists('tfPlan.bin')
          }
        }
      }
      steps {
        dir(readFile('tfFileDirectory.txt')) {
          archiveArtifacts artifacts: '**'
        }
      }
    }
  }
}
