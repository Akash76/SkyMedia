pipeline {
  agent any
  parameters {
    string(name: 'TERRAFORM_BACKEND_CONFIG', defaultValue: 'backend.tf')
  }
  options {
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericHeaderVariables: [
        [key: 'x-github-event']
      ],
      genericVariables: [
        [key: 'event_action', value: '$.action'],
        [key: 'pull_request_id', value: '$.pull_request.number'],
        [key: 'pull_request_hash', value: '$.pull_request.head.sha'],
        [key: 'pull_request_branch', value: '$.pull_request.head.ref'],
        [key: 'pull_request_repository_url', value: '$.pull_request.head.repo.url'],
        [key: 'pull_request_repository_name', value: '$.pull_request.head.repo.name']
      ],
      causeString: 'Pull Request $pull_request_id $pull_request_action on $pull_request_branch branch in $pull_request_repository_name repository',
      regexpFilterExpression: '(pull_request).(opened|reopened|synchronize)'
      regexpFilterText: '$x_github_event.$event_action',
    )
  }
  stages {
    stage('GitHub Changed Files') {
      steps {
        sh '''#!/bin/bash -ex
          git clean -dff
          for changedFile in $(git diff --name-only $GIT_COMMIT $pull_request_hash)
          do
            if [ ${changedFile: -3} == ".tf" ]
            then
              echo -n "$(dirname $changedFile)" > tfFilePath
              break
            fi
          done
        '''
      }
    }
    stage('GitHub Check Run') {
      when {
        expression {
          fileExists('tfFilePath')
        }
      }
      steps {
        httpRequest url: "$pull_request_repository_url/check-runs", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_ACCEPT_HEADER"],[name: 'Authorization', value: "$GITHUB_AUTH_HEADER"]]      
      }
    }
    stage('Terraform Init & Plan') {
      when {
        expression {
          fileExists('tfFilePath')
        }
      }
      steps {
        sh '''#!/bin/bash -ex
          tfFilePath=$(cat tfFilePath)
          cd $tfFilePath
          terraform init -input=false -backend-config="$TERRAFORM_BACKEND_CONFIG" -no-color &> tfInit.txt
          terraform plan -input=false -out=tfPlan -no-color &> tfPlan.txt
        '''
      }
    }
    stage('Build Artifacts Storage') {
      when {
        expression {
          fileExists('tfFilePath')
        }
        expression {
          dir(readFile('tfFilePath')) {
            fileExists('tfPlan')
          }
        }
      }
      steps {
        dir(readFile('tfFilePath')) {
          archiveArtifacts artifacts: '**'
        }
      }
    }
  }
}
