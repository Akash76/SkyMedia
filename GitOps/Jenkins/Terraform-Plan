pipeline {
  agent any
  parameters {
    string(name: 'Terraform_BackendConfig', defaultValue: 'backend.tf', description: 'Terraform backend configuration file.')
  }
  options {
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericVariables: [
        [key: 'PULL_REQUEST_ACTION', value: '$.action'],
        [key: 'PULL_REQUEST_COMMIT', value: '$.pull_request.head.sha'],
        [key: 'PULL_REQUEST_BRANCH', value: '$.pull_request.head.ref'],
        [key: 'PULL_REQUEST_LABEL', value: '$.pull_request.head.label']
      ],
      causeString: '$PULL_REQUEST_LABEL',
      regexpFilterText: '$PULL_REQUEST_ACTION',
      regexpFilterExpression: 'opened'
    )
  }
  stages {
    stage('GitHub Event') {
      steps {
        sh '''#!/bin/bash -xe
          git clean -df
          for changedFile in $(git diff --name-only $GIT_COMMIT $PULL_REQUEST_COMMIT)
          do
            if [ ${changedFile: -3} == ".tf" ]
            then
              echo -n "$(dirname $changedFile)" > tfFilePath
              break
            fi
          done
        '''
      }
    }
    stage('Terraform Plan') {
      when {
        expression {
          fileExists('tfFilePath')
        }
      }
      steps {
        sh '''#!/bin/bash -xe
          tfFilePath=$(cat tfFilePath)
          cd $tfFilePath
          terraform init -input=false -backend-config="$Terraform_BackendConfig" -no-color &> tfInit.txt
          terraform plan -input=false -out=tfPlan -no-color &> tfPlan.txt
        '''
      }
    }
    stage('Build Artifacts') {
      when {
        expression {
          def tfFilePath = readFile('tfFilePath')
          return fileExists(tfFilePath)
        }
      }
      steps {
        dir(readFile('tfFilePath')) {
          archiveArtifacts artifacts: 'tfPlan'
        }
      }
    }
  }
}
