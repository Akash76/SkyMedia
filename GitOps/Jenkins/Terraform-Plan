pipeline {
  agent any
  parameters {
    string(name: 'GITHUB_APP_CREDENTIAL_ID', defaultValue: 'GitHubAppKey')
    string(name: 'GITHUB_APP_TOKEN_SECONDS', defaultValue: '180')
    string(name: 'GITHUB_HEADER_ACCEPT_AUTH', defaultValue: 'application/vnd.github.machine-man-preview+json')
    string(name: 'GITHUB_HEADER_ACCEPT_CHECK', defaultValue: 'application/vnd.github.antiope-preview+json')
    string(name: 'TF_BACKEND_CONFIG', defaultValue: '/tfBackendConfig.txt')
    booleanParam(name: 'TF_IN_AUTOMATION', defaultValue: true)
    string(name: 'ARM_TENANT_ID', defaultValue: '72f988bf-86f1-41af-91ab-2d7cd011db47')
    string(name: 'ARM_SUBSCRIPTION_ID', defaultValue: '3d07cfbc-17aa-41b4-baa1-488fef85a1d3')
    booleanParam(name: 'ARM_USE_MSI', defaultValue: true)
  }
  options {
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericHeaderVariables: [
        [key: 'x-github-event']
      ],
      genericVariables: [
        [key: 'EVENT_ACTION', value: '$.action'],
        [key: 'APP_INSTALLATION_ID', value: '$.installation.id'],
        [key: 'PULL_REQUEST_ID', value: '$.pull_request.number'],
        [key: 'PULL_REQUEST_HASH', value: '$.pull_request.head.sha'],
        [key: 'PULL_REQUEST_BRANCH', value: '$.pull_request.head.ref'],
        [key: 'PULL_REQUEST_REPOSITORY_URL', value: '$.pull_request.head.repo.url'],
        [key: 'PULL_REQUEST_REPOSITORY_HOST', value: '$.pull_request.head.repo.url', regexpFilter: '(/repos)(.*)'],
        [key: 'PULL_REQUEST_REPOSITORY_NAME', value: '$.pull_request.head.repo.name']
      ],
      causeString: 'Pull Request $PULL_REQUEST_ID $EVENT_ACTION on $PULL_REQUEST_BRANCH branch in $PULL_REQUEST_REPOSITORY_NAME repository',
      regexpFilterExpression: '(pull_request).(opened|reopened|synchronize)',
      regexpFilterText: '$x_github_event.$EVENT_ACTION'
    )
  }
  stages {
    stage('GitHub Pull Request') {
      steps {
        sh '''#!/bin/bash -ex
          git clean -dff
          for changedFile in $(git diff --name-only $GIT_COMMIT $PULL_REQUEST_HASH)
          do
            if [ ${changedFile: -3} == ".tf" ]
            then
              echo -n "$(dirname $changedFile)" > tfFileDirectory.txt
              echo -n "$changedFile" > tfFilePath.txt
              break
            fi
          done
        '''
      }
    }
    stage('Terraform Init & Plan') {
      when {
        expression {
          fileExists('tfFilePath.txt')
        }
      }
      environment {
        GITHUB_APP_KEY = credentials("$GITHUB_APP_CREDENTIAL_ID")
        GITHUB_APP_TOKEN = sh(script: "python3 $WORKSPACE/GetWebToken.py $GITHUB_APP_KEY_USR $GITHUB_APP_KEY $GITHUB_APP_TOKEN_SECONDS 'RS256'", returnStdout: true)
        GITHUB_APP_INSTALLATION_TOKEN = ''
        GITHUB_APP_CHECK_RUN_ID = ''
      }
      steps {
        script {
          def httpResponse = httpRequest url: "$PULL_REQUEST_REPOSITORY_HOST/installations/$APP_INSTALLATION_ID/access_tokens", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_HEADER_ACCEPT_AUTH"],[name: 'Authorization', value: "Bearer $GITHUB_APP_TOKEN"]]
          def jsonResponse = readJSON text: httpResponse.content
          GITHUB_APP_INSTALLATION_TOKEN = jsonResponse.token
          httpResponse = httpRequest url: "$PULL_REQUEST_REPOSITORY_URL/check-runs", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_HEADER_ACCEPT_CHECK"],[name: 'Authorization', value: "token $GITHUB_APP_INSTALLATION_TOKEN"]], requestBody: "{\"name\":\"Terraform Init\", \"head_sha\":\"$PULL_REQUEST_HASH\", \"status\":\"in_progress\"}"
          jsonResponse = readJSON text: httpResponse.content
          GITHUB_APP_CHECK_RUN_ID = jsonResponse.id
        }
        sh '''#!/bin/bash -ex
          tfStateFile="$(sed 's|/|-|g' tfFilePath.txt)state"
          cd $(cat tfFileDirectory.txt)
          echo 'terraform {' > backend.tf
          echo 'backend "azurerm" {}' >> backend.tf
          echo '}' >> backend.tf
          terraform init -input=false -backend-config="$WORKSPACE$TF_BACKEND_CONFIG" -backend-config="key=$tfStateFile" -no-color &> tfInit.txt
        '''
        script {
          dir(readFile('tfFileDirectory.txt')) {
            TF_INIT = readFile('tfInit.txt')
          }
          httpRequest url: "$PULL_REQUEST_REPOSITORY_URL/check-runs/$GITHUB_APP_CHECK_RUN_ID", httpMode: 'PATCH', customHeaders: [[name: 'Accept', value: "$GITHUB_HEADER_ACCEPT_CHECK"],[name: 'Authorization', value: "token $GITHUB_APP_INSTALLATION_TOKEN"]], requestBody: "{\"name\":\"Terraform Init\", \"status\":\"completed\", \"conclusion\":\"success\", \"output\":{\"title\":\"Init\", \"summary\":\"$TF_INIT\"}}"
          def httpResponse = httpRequest url: "$PULL_REQUEST_REPOSITORY_URL/check-runs", httpMode: 'POST', customHeaders: [[name: 'Accept', value: "$GITHUB_HEADER_ACCEPT_CHECK"],[name: 'Authorization', value: "token $GITHUB_APP_INSTALLATION_TOKEN"]], requestBody: "{\"name\":\"Terraform Plan\", \"head_sha\":\"$PULL_REQUEST_HASH\", \"status\":\"in_progress\"}"
          jsonResponse = readJSON text: httpResponse.content
          GITHUB_APP_CHECK_RUN_ID = jsonResponse.id
        }
        sh '''#!/bin/bash -ex
          cd $(cat tfFileDirectory.txt)
          terraform plan -input=false -out=tfPlan.bin -no-color &> tfPlan.txt
        '''
        httpRequest url: "$PULL_REQUEST_REPOSITORY_URL/check-runs/$GITHUB_APP_CHECK_RUN_ID", httpMode: 'PATCH', customHeaders: [[name: 'Accept', value: "$GITHUB_HEADER_ACCEPT_CHECK"],[name: 'Authorization', value: "token $GITHUB_APP_INSTALLATION_TOKEN"]], requestBody: "{\"name\":\"Terraform Plan\", \"status\":\"completed\", \"conclusion\":\"success\"}"
      }
    }
    stage('Build Artifacts Storage') {
      when {
        expression {
          fileExists('tfFileDirectory.txt')
        }
        expression {
          dir(readFile('tfFileDirectory.txt')) {
            fileExists('tfPlan.bin')
          }
        }
      }
      steps {
        dir(readFile('tfFileDirectory.txt')) {
          //archiveArtifacts artifacts: '**'
        }
      }
    }
  }
}
