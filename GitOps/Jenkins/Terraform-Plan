pipeline {
  agent any
  parameters {
    string(name: 'TERRAFORM_BACKEND_CONFIG', defaultValue: 'backend.tf')
  }
  options {
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericVariables: [
        [key: 'CHECK_SUITE_STATUS', value: '$.check_suite.status'],
        [key: 'CHECK_SUITE_COMMIT', value: '$.check_suite.head_sha'],
        [key: 'CHECK_SUITE_BRANCH', value: '$.check_suite.head_branch'],
        [key: 'GITHUB_REPOSITORY_URL', value: '$.repository.url']
      ],
      causeString: '$CHECK_SUITE_BRANCH',
      regexpFilterText: '$CHECK_SUITE_STATUS',
      regexpFilterExpression: 'queued'
    )
  }
  stages {
    stage('GitHub Pull Request') {
      steps {
        sh '''#!/bin/bash -ex
          git clean -dff
          for changedFile in $(git diff --name-only $GIT_COMMIT $CHECK_SUITE_COMMIT)
          do
            if [ ${changedFile: -3} == ".tf" ]
            then
              echo -n "$(dirname $changedFile)" > tfFilePath
              break
            fi
          done
        '''
        httpRequest url: "$GITHUB_REPOSITORY_URL/check-runs", httpMode: 'POST', customHeaders: [[name: 'Accept', value: 'application/vnd.github.antiope-preview+json'],[name: 'Authorization', value: "$GITHUB_AUTH_HEADER"]]
      }
    }
    stage('Terraform Plan') {
      when {
        expression {
          fileExists('tfFilePath')
        }
      }
      steps {
        sh '''#!/bin/bash -ex
          tfFilePath=$(cat tfFilePath)
          cd $tfFilePath
          terraform init -input=false -backend-config="$TERRAFORM_BACKEND_CONFIG" -no-color &> tfInit.txt
          terraform plan -input=false -out=tfPlan -no-color &> tfPlan.txt
        '''
      }
    }
    stage('Build Artifacts') {
      when {
        expression {
          fileExists('tfFilePath')
        }
        expression {
          dir(readFile('tfFilePath')) {
            fileExists('tfPlan')
          }
        }
      }
      steps {
        dir(readFile('tfFilePath')) {
          archiveArtifacts artifacts: '**'
        }
      }
    }
  }
}
