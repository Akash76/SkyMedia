pipeline {
  agent any
  parameters {
    string(name: 'BuildArchive_ProjectName', defaultValue: 'Terraform-Plan')
  }
  options {
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericVariables: [
        [key: 'event_action', value: '$.action'],
        [key: 'pull_request_number', value: '$.pull_request.number'],
        [key: 'pull_request_merged', value: '$.pull_request.merged'],
        [key: 'pull_request_branch', value: '$.pull_request.head.ref'],
        [key: 'pull_request_repository_url', value: '$.pull_request.head.repo.url'],
        [key: 'pull_request_repository_name', value: '$.pull_request.head.repo.name']
      ],
      causeString: 'Pull Request $pull_request_number $pull_request_action on $pull_request_branch branch in $pull_request_repository_name repository',
      regexpFilterText: '$x_github_event.$event_action.$pull_request_merged',
      regexpFilterExpression: 'pull_request.closed.true'
    )
  }  
  stages {
    stage('Build Artifacts') {
      steps {
        copyArtifacts projectName: params.BuildArchive_ProjectName
      }
    }
    stage('Terraform Apply') {
      when {
        expression {
          fileExists('tfPlan')
        }
      }
      steps {
        sh '''#!/bin/bash -xe
          #terraform apply -input=false tfPlan
        '''
      }
    }
  }
}
