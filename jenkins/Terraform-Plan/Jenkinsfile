pipeline {
  agent any
  parameters {
    string(name: 'ARM_TENANT_ID', description: 'Azure Active Directory tenant identifier.')
    string(name: 'ARM_SUBSCRIPTION_ID', description: 'Azure subscription identifier.')
    booleanParam(name: 'ARM_USE_MSI', defaultValue: true, description: 'Azure managed service identity (MSI) authorization.')
    booleanParam(name: 'TF_IN_AUTOMATION', defaultValue: true, description: 'Terraform designator for orchestarted context.')
  }
  triggers {
    GenericTrigger(
      genericVariables: [
        [key: 'LABEL', value: '$.pull_request.head.label'],
        [key: 'ACTION', value: '$.action'],
        [key: 'GIT_PR_SHA', value: '$.pull_request.head.sha']
      ],
      causeString: '$LABEL',
      regexpFilterText: '$ACTION',
      regexpFilterExpression: 'opened'
    )
  }
  stages {
    stage('Validate Context') {
      steps {
        sh '''#!/bin/bash -xe
for changedFile in $(git diff --name-only $GIT_COMMIT $GIT_PR_SHA)
do
  if [ ${changedFile: -3} == ".tf" ]
  then
    echo -n "$(dirname $changedFile)" > tfFilePath
    break
  fi
done
'''
      }
    }
    stage('Terraform Plan') {
      when {
        expression {
          fileExists('tfFilePath')
        }
      }
      steps {
        sh '''#!/bin/bash -xe
tfFilePath=$(cat tfFilePath)
cp $TF_BACKEND_CONFIG $tfFilePath
cd $tfFilePath
terraform init -input=false -backend-config=$TF_BACKEND_CONFIG
terraform plan -input=false -out=tfPlan
'''
        dir(readFile('tfFilePath').trim()) {
          archiveArtifacts artifacts: '**/*'
        }
      }
    }
  }
}
