pipeline {
  agent any
  parameters {
    string(name: 'ARM_TENANT_ID', defaultValue: '72f988bf-86f1-41af-91ab-2d7cd011db47', description: 'Azure Active Directory tenant identifier.')
    string(name: 'ARM_SUBSCRIPTION_ID', defaultValue: '3d07cfbc-17aa-41b4-baa1-488fef85a1d3', description: 'Azure subscription identifier.')
    booleanParam(name: 'ARM_USE_MSI', defaultValue: true, description: 'Azure managed service identity (MSI) authorization.')
    booleanParam(name: 'TF_IN_AUTOMATION', defaultValue: true, description: 'Terraform designator for orchestration context.')
    string(name: 'TF_BACKEND_CONFIG_FILE', defaultValue: 'backend.tf', description: 'Terraform backend configuration file.')
  }
  options {
    disableConcurrentBuilds()
  }
  triggers {
    GenericTrigger(
      genericVariables: [
        [key: 'PR_ACTION', value: '$.action'],
        [key: 'PR_COMMIT', value: '$.pull_request.head.sha'],
        [key: 'PR_BRANCH', value: '$.pull_request.head.ref'],
        [key: 'PR_LABEL', value: '$.pull_request.head.label']
      ],
      causeString: '$PR_LABEL',
      regexpFilterText: '$PR_ACTION',
      regexpFilterExpression: 'opened'
    )
  }
  stages {
    stage('Pipeline Context') {
      steps {
        sh '''#!/bin/bash -xe
          rm -f tfFilePath
          for changedFile in $(git diff --name-only $GIT_COMMIT $PR_COMMIT)
          do
            if [ ${changedFile: -3} == ".tf" ]
            then
              echo -n "$(dirname $changedFile)" > tfFilePath
              break
            fi
          done
        '''
      }
    }
    stage('Git Pull') {
      when {
        expression {
          fileExists('tfFilePath')
        }
      }
      steps {
        sh '''#!/bin/bash -xe
          git checkout $PR_BRANCH
          git pull $GITHUB_REPOSITORY $PR_BRANCH
        '''
      }
    }
    stage('Terraform Init') {
      when {
        expression {
          fileExists('tfFilePath')
        }
      }
      steps {
        sh '''#!/bin/bash -xe
          tfFilePath=$(cat tfFilePath)
          cp $TF_BACKEND_CONFIG_FILE $tfFilePath
          cd $tfFilePath
          terraform init -input=false -backend-config=$TF_BACKEND_CONFIG_FILE &> tfInit.txt
          git add tfInit.txt
          git commit -m "Add Terraform init output file (tfInit.txt)"
          git push $GITHUB_REPOSITORY HEAD:$PR_BRANCH
        '''
      }
    }
    stage('Terraform Plan') {
      when {
        expression {
          fileExists('tfFilePath')
        }
      }
      steps {
        sh '''#!/bin/bash -xe
          tfFilePath=$(cat tfFilePath)
          cd $tfFilePath
          terraform plan -input=false -out=tfPlan &> tfPlan.txt
          git add tfPlan.txt
          git commit -m "Add Terraform plan output file (tfPlan.txt)"
          git push $GITHUB_REPOSITORY HEAD:$PR_BRANCH
        '''
        dir(readFile('tfFilePath').trim()) {
          archiveArtifacts artifacts: '**/*'
        }
      }
    }
  }
}
